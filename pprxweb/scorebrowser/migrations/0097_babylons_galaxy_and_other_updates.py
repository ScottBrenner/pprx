# Generated by Django 3.2.16 on 2023-11-15 04:51

from django.db import migrations
from django.db.models import Max


def forward(apps, schema_editor):
    UnlockEvent = apps.get_model("scorebrowser", "UnlockEvent")
    UnlockTask = apps.get_model("scorebrowser", "UnlockTask")
    ChartUnlock = apps.get_model("scorebrowser", "ChartUnlock")
    SongLock = apps.get_model("scorebrowser", "SongLock")
    Song = apps.get_model("scorebrowser", "Song")
    Chart = apps.get_model("scorebrowser", "Chart")
    CabinetModel = apps.get_model("scorebrowser", "CabinetModel")

    def findSong(title):
        candidates = Song.objects.filter(title=title)
        for song in candidates:
            if song.title == title:
                return song

    def findCharts(title):
        candidates = Chart.objects.filter(song__title=title)
        return [c for c in candidates if (c.song.title == title)]

    def rotate(goldTitle, silverTitle, bronzeTitle, defaultTitle):
        bronze = UnlockTask.objects.filter(event__name="GOLDEN LEAGUE A3", name="BRONZE CLASS").first().id
        silver = UnlockTask.objects.filter(event__name="GOLDEN LEAGUE A3", name="SILVER CLASS").first().id
        gold = UnlockTask.objects.filter(event__name="GOLDEN LEAGUE A3", name="GOLD CLASS").first().id
        advance = UnlockTask.objects.filter(event__name="GOLDEN LEAGUE A3", name="GOLD CLASS with advanced border").first().id

        goldUnlocks = ChartUnlock.objects.filter(task_id=advance, chart__song__title=goldTitle)
        for unlock in goldUnlocks:
            if unlock.chart.song.title == goldTitle:
                unlock.task_id = gold
                unlock.save()

        silverUnlocks = ChartUnlock.objects.filter(task_id=gold, chart__song__title=silverTitle)
        for unlock in silverUnlocks:
            if unlock.chart.song.title == silverTitle:
                unlock.task_id = silver
                unlock.save()

        bronzeUnlocks = ChartUnlock.objects.filter(task_id=silver, chart__song__title=bronzeTitle)
        for unlock in bronzeUnlocks:
            if unlock.chart.song.title == bronzeTitle:
                unlock.task_id = bronze
                unlock.save()

        defaultUnlocks = ChartUnlock.objects.filter(task_id=bronze, chart__song__title=defaultTitle)
        for unlock in defaultUnlocks:
            if unlock.chart.song.title == defaultTitle:
                unlock.delete()

        SongLock.objects.filter(version_id=19, song__title=bronzeTitle).delete()

    def newGoldenLeague(title):
        advanceBorder = UnlockTask.objects.filter(name='GOLD CLASS with advanced border').first()
        for c in findCharts(title):
            ChartUnlock.objects.create(version_id=19, task=advanceBorder, chart=c)

        white = CabinetModel.objects.get(name="white")
        SongLock.objects.create(model=white, song=findSong(title))

    def findChart(title, difficulty_id):
        candidates = Chart.objects.filter(song__title=title, difficulty_id=difficulty_id)
        for chart in candidates:
            if chart.song.title == title: # 'take me higher' / 'TAKE ME HIGHER' sql collation woes
                return chart
        return None

    def newChallengeChart(title):
        print("new challenge chart for", title)
        newChallengeChartsEvent = UnlockEvent.objects.filter(name="New Challenge charts (A3)").first()
        newChart = UnlockTask.objects.create(event=newChallengeChartsEvent, name="{} Challenge".format(title), ordering=20)
        chart = findChart(title, 4)
        ChartUnlock.objects.create(version_id=18, task=newChart, chart=chart)
        return chart

    gpAdvance = UnlockEvent.objects.filter(name='GRAND PRIX Advance Play').first()
    def gpPack(packName, titles):
        gpPack.nextOrdering += 10
        pack = UnlockTask.objects.create(event=gpAdvance, name=packName, ordering=gpPack.nextOrdering)

        for title in titles:
            for difficulty_id in range(4):
                chart = findChart(title, difficulty_id)
                ChartUnlock.objects.create(version_id=19, task=pack, chart=chart)

        return pack
    gpPack.nextOrdering = UnlockTask.objects.filter(event=gpAdvance).aggregate(Max('ordering'))['ordering__max']

    def gpChallenge(packs, titles):
        charts = [newChallengeChart(title) for title in titles]
        for pack in packs:
            for chart in charts:
                ChartUnlock.objects.create(version_id=19, task=pack, chart=chart)

    def createExtraSaviors(version_id, event, title, firstOrdering):
        taskOrdering = firstOrdering
        for chart in findCharts(title):
            task = UnlockTask.objects.create(event=event, name='{} ({} {})'.format(title, chart.difficulty.name, chart.rating), ordering=taskOrdering)
            ChartUnlock.objects.create(version_id=version_id, task=task, chart=chart, extra=True)
            taskOrdering += 10
        return taskOrdering

    rotate("Not Alone", "Jungle Dance", "Lose Your Sense", "Let Me Know")
    rotate("GROOVE 04", "Rave in the Shell", "Sector", "Let Me Show You")
    newGoldenLeague("Euphoric Fragmentation")
    newChallengeChart("Going Hypersonic")

    touhou3 = gpPack("SPECIAL music pack feat.Touhou Project vol.3", ["HANIPAGANDA", "LOVE EAST", "トランスダンスアナーキー"])
    touhou4 = gpPack("SPECIAL music pack feat.Touhou Project vol.4", ["INFINITE WORLD", "Kill The Night", "しゅわスパ大作戦☆"])
    gpChallenge([touhou3, touhou4], ['トランスダンスアナーキー', 'Kill The Night', 'Grip & Break down !!', 'WARNING×\u200bWARNING×\u200bWARNING'])

    babylon = UnlockEvent.objects.create(name="BABY-LON'S GALAXY", ordering=270)
    nextOrdering = createExtraSaviors(19, babylon, 'BLUE FOG, SILVER BULLET.', 0)
    nextOrdering = createExtraSaviors(19, babylon, 'Electronic Sports Complex', nextOrdering)
    nextOrdering = createExtraSaviors(19, babylon, 'ｍｅｍｏｒｙ／／ＤＡＴＡＭＯＳＨＥＲ', nextOrdering)
    nextOrdering = createExtraSaviors(19, babylon, 'Come To m1dy', nextOrdering)
    nextOrdering = createExtraSaviors(19, babylon, 'SISYPHUS', nextOrdering)
    nextOrdering = createExtraSaviors(19, babylon, 'New Millennium', nextOrdering)

    saveTheBird = UnlockEvent.objects.create(name="BABY-LON'S GALAXY ENCORE EXTRA STAGE", ordering=271, completable=False)
    birdTask = UnlockTask.objects.create(event=saveTheBird, name="Phoenix", ordering=0)
    ChartUnlock.objects.create(version_id=19, task=birdTask, chart=findChart("鳳", 4), extra=True)


def backward(apps, schema_editor):
    pass


class Migration(migrations.Migration):

    dependencies = [
        ('scorebrowser', '0096_kac_updates'),
    ]

    operations = [migrations.RunPython(forward, backward)]
