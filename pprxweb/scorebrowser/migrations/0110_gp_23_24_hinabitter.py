# Generated by Django 3.2.16 on 2023-12-22 03:09

from django.db import migrations
from django.db.models import Max

def forward(apps, schema_editor):
    UnlockEvent = apps.get_model("scorebrowser", "UnlockEvent")
    UnlockTask = apps.get_model("scorebrowser", "UnlockTask")
    ChartUnlock = apps.get_model("scorebrowser", "ChartUnlock")
    Chart = apps.get_model("scorebrowser", "Chart")

    def findChart(title, difficulty_id):
        candidates = Chart.objects.filter(song__title=title, difficulty_id=difficulty_id)
        for chart in candidates:
            if chart.song.title == title: # 'take me higher' / 'TAKE ME HIGHER' sql collation woes
                return chart
        return None

    gpAdvance = UnlockEvent.objects.filter(name='GRAND PRIX Advance Play').first()
    def gpPack(packName, titles):
        gpPack.nextOrdering += 10
        pack = UnlockTask.objects.create(event=gpAdvance, name=packName, ordering=gpPack.nextOrdering)

        for title in titles:
            for difficulty_id in range(4):
                chart = findChart(title, difficulty_id)
                ChartUnlock.objects.create(version_id=19, task=pack, chart=chart)

        return pack
    gpPack.nextOrdering = UnlockTask.objects.filter(event=gpAdvance).aggregate(Max('ordering'))['ordering__max']

    def newChallengeChart(title):
        print("new challenge chart for", title)
        newChallengeChartsEvent = UnlockEvent.objects.filter(name="New Challenge charts (A3)").first()
        newChart = UnlockTask.objects.create(event=newChallengeChartsEvent, name="{} Challenge".format(title), ordering=20)
        chart = findChart(title, 4)
        ChartUnlock.objects.create(version_id=18, task=newChart, chart=chart)
        return chart

    def gpChallenge(packs, charts):
        for pack in packs:
            for chart in charts:
                ChartUnlock.objects.create(version_id=19, task=pack, chart=chart)

    vol23 = gpPack("GRAND PRIX music pack vol.23", [])
    vol24 = gpPack("GRAND PRIX music pack vol.24", [])
    gpChallenge([vol23, vol24], [newChallengeChart("Hopeful"), newChallengeChart("Thank You Merry Christmas")])

    hinabitter1 = gpPack("SPECIAL music pack feat.HinaBitter♪ vol.1", ["Finally Dive", "コンフェイト＊コンチェルト", "都会征服Girls☆", "めうめうぺったんたん！！ (ZAQUVA Remix)"])
    hinabitter2 = gpPack("SPECIAL music pack feat.HinaBitter♪ vol.2", ["千客万来☆無問題！", "ちくわパフェだよ☆ＣＫＰ (Yvya Remix)", "ナナイロライト", "走れメロンパン"])
    gpChallenge([hinabitter1, hinabitter2], [findChart("めうめうぺったんたん！！ (ZAQUVA Remix)", 4), findChart("ちくわパフェだよ☆ＣＫＰ (Yvya Remix)", 4)])


def backward(apps, schema_editor):
    pass

class Migration(migrations.Migration):

    dependencies = [
        ('scorebrowser', '0109_lightspeed_challenge'),
    ]

    operations = [migrations.RunPython(forward, backward)]
