# Generated by Django 4.2.7 on 2024-11-09 02:09

from django.db import migrations
from django.db.models import Max

def forward(apps, schema_editor):
    Song = apps.get_model("scorebrowser", "Song")
    Chart = apps.get_model("scorebrowser", "Chart")
    ChartUnlock = apps.get_model("scorebrowser", "ChartUnlock")
    UnlockTask = apps.get_model("scorebrowser", "UnlockTask")
    UnlockEvent = apps.get_model("scorebrowser", "UnlockEvent")
    UnlockGroup = apps.get_model("scorebrowser", "UnlockGroup")


    def findChart(title, difficulty_id):
        candidates = Chart.objects.filter(song__title=title, difficulty_id=difficulty_id)
        for chart in candidates:
            if chart.song.title == title: # 'take me higher' / 'TAKE ME HIGHER' sql collation woes
                return chart
        return None

    gpAdvance = UnlockEvent.objects.get(name='GRAND PRIX Advance Play')
    def gpPack(packName, titles):
        gpPack.nextOrdering += 10
        pack = UnlockTask.objects.create(event=gpAdvance, name=packName, ordering=gpPack.nextOrdering)

        for title in titles:
            for difficulty_id in range(4):
                chart = findChart(title, difficulty_id)
                ChartUnlock.objects.create(task=pack, chart=chart)

        return pack
    gpPack.nextOrdering = UnlockTask.objects.filter(event=gpAdvance).aggregate(Max('ordering'))['ordering__max']

    # It is fine to use this event, because the point is to lock them on A20Plus
    # There are no A3 cabs in the wild that we care about
    # If this comes back to bite me, I will run another migration to duplicate these into A3
    newChallengeChartsEvent = UnlockEvent.objects.get(name="New Challenge charts (A3)")
    def newChallengeChart(title):
        newChart = UnlockTask.objects.create(event=newChallengeChartsEvent, name="{} Challenge".format(title), ordering=20)
        chart = findChart(title, 4)
        ChartUnlock.objects.create(task=newChart, chart=chart)
        return chart

    def gpChallenge(packs, charts):
        for pack in packs:
            for chart in charts:
                ChartUnlock.objects.create(task=pack, chart=chart)

    gpChallenge(
        [gpPack("SPECIAL music pack feat.jubeat vol.3", ["1116", "Sahara"])],
        [findChart("1116", 4)]
    )

    gpChallenge(
        [gpPack("music pack vol.33", []), gpPack("music pack vol.34", [])],
        [newChallengeChart("ONYX"), newChallengeChart("High & Low")]
    )



    def findCharts(title):
        candidates = Chart.objects.filter(song__title=title)
        if len(candidates) == 0:
            raise Exception("No charts found for {}".format(title))
        return [c for c in candidates if (c.song.title == title)]

    group = UnlockGroup.objects.get(name="Golden League")
    worldLeague = UnlockEvent.objects.create(
        version_id=20,
        group=group,
        name="WORLD LEAGUE",
        progressive=True,
        ordering=0,
        amethyst_required=False,
    )

    bronzeClass = UnlockTask.objects.create(event=worldLeague, name="BRONZE CLASS", ordering=10)
    silverClass = UnlockTask.objects.create(event=worldLeague, name="SILVER CLASS", ordering=20)
    goldClass = UnlockTask.objects.create(event=worldLeague, name="GOLD CLASS", ordering=30)

    for chart in findCharts("Time to HYPERDRIVE"):
        ChartUnlock.objects.create(task=silverClass, chart=chart)


def backward(apps, schema_editor):
    pass

class Migration(migrations.Migration):

    dependencies = [
        ('scorebrowser', '0167_triple_tribe_s4_gold'),
    ]


    operations = [migrations.RunPython(forward, backward)]