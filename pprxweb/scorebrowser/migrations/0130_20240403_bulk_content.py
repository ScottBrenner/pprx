# Generated by Django 3.2.16 on 2024-04-04 04:02

from django.db import migrations
from django.db.models import Max

def forward(apps, schema_editor):
    UnlockEvent = apps.get_model("scorebrowser", "UnlockEvent")
    UnlockTask = apps.get_model("scorebrowser", "UnlockTask")
    ChartUnlock = apps.get_model("scorebrowser", "ChartUnlock")
    Chart = apps.get_model("scorebrowser", "Chart")

    def findChart(title, difficulty_id):
        candidates = Chart.objects.filter(song__title=title, difficulty_id=difficulty_id)
        for chart in candidates:
            if chart.song.title == title: # 'take me higher' / 'TAKE ME HIGHER' sql collation woes
                return chart
        return None

    def newChallengeChart(title):
        newChallengeChartsEvent = UnlockEvent.objects.filter(name="New Challenge charts (A3)").first()
        newChart = UnlockTask.objects.create(event=newChallengeChartsEvent, name="{} Challenge".format(title), ordering=20)
        chart = findChart(title, 4)
        ChartUnlock.objects.create(task=newChart, chart=chart)
        return chart

    newChallengeChart("Yuni's Nocturnal Days")

    gpAdvance = UnlockEvent.objects.filter(name='GRAND PRIX Advance Play').first()
    def gpPack(packName, titles):
        gpPack.nextOrdering += 10
        pack = UnlockTask.objects.create(event=gpAdvance, name=packName, ordering=gpPack.nextOrdering)

        for title in titles:
            for difficulty_id in range(4):
                chart = findChart(title, difficulty_id)
                ChartUnlock.objects.create(task=pack, chart=chart)

        return pack
    gpPack.nextOrdering = UnlockTask.objects.filter(event=gpAdvance).aggregate(Max('ordering'))['ordering__max']

    def gpChallenge(packs, charts):
        for pack in packs:
            for chart in charts:
                ChartUnlock.objects.create(task=pack, chart=chart)

    bemani1 = gpPack("BEMANI SELECTION music pack vol.1", [])
    gpChallenge([bemani1], [
        newChallengeChart("Plan 8"),
        newChallengeChart("FUNKY SUMMER BEACH"),
        newChallengeChart("海神"),
    ])

def backward(apps, schema_editor):
    pass

class Migration(migrations.Migration):

    dependencies = [
        ('scorebrowser', '0129_auto_20240331_1435'),
    ]

    operations = [migrations.RunPython(forward, backward)]
