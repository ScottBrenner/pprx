# Generated by Django 3.2.16 on 2024-04-05 02:53

from django.db import migrations
from django.db.models import Max

def forward(apps, schema_editor):
    UnlockGroup = apps.get_model("scorebrowser", "UnlockGroup")
    UnlockEvent = apps.get_model("scorebrowser", "UnlockEvent")
    UnlockTask = apps.get_model("scorebrowser", "UnlockTask")
    ChartUnlock = apps.get_model("scorebrowser", "ChartUnlock")
    Chart = apps.get_model("scorebrowser", "Chart")
    UserUnlock = apps.get_model("scorebrowser", "UserUnlock")

    time_limited = UnlockGroup.objects.get(name="Time-limited events")
    extra_savior = UnlockGroup.objects.get(name="Extra Savior")

    mixup = UnlockEvent.objects.get(name="いちかのごちゃまぜMix UP！")
    step1 = UnlockTask.objects.get(name="Step 1", event=mixup)
    step2 = UnlockTask.objects.get(name="Step 2", event=mixup)
    final_song = UnlockTask.objects.get(name="Final Song", event=mixup)

    step1_unlocks = UserUnlock.objects.filter(task=step1)
    step2_unlocks = UserUnlock.objects.filter(task=step2)
    final_song_unlocks = UserUnlock.objects.filter(task=final_song)

    ordering = UnlockEvent.objects.aggregate(Max('ordering'))['ordering__max']
    mixup_wave1 = UnlockEvent.objects.create(version_id=19, group=extra_savior, name=mixup.name+' (wave 1)', ordering=ordering+10)
    mixup_wave2 = UnlockEvent.objects.create(version_id=19, group=extra_savior, name=mixup.name+' (wave 2)', ordering=ordering+20, amethyst_required=False)

    def findCharts(title):
        candidates = Chart.objects.filter(song__title=title).order_by('difficulty_id')
        return [c for c in candidates if (c.song.title == title)]

    volaquas_challenge = Chart.objects.get(song__title='VOLAQUAS', difficulty_id=4)

    # THIS METHOD IS VERY CUSTOM FOR THIS EVENT.  DO NOT COPY BLINDLY.
    def createExtraSaviors(event, title, firstOrdering, unlocks): # extra parameter for unlocks transfer
        taskOrdering = firstOrdering
        for chart in findCharts(title)[:4]: # cutting off challenge because this doesn't unlock it
            task = UnlockTask.objects.create(event=event, name='{} ({} {})'.format(title, chart.difficulty.name, chart.rating), ordering=taskOrdering)
            unlock = ChartUnlock.objects.create(task=task, chart=chart, extra=True)
            createExtraSaviors.grant_unlocks += [UserUnlock(user=old_unlock.user, task=task) for old_unlock in unlocks] # performing unlocks transfer
            taskOrdering += 10
            ChartUnlock.objects.create(task=task, chart=volaquas_challenge) # tack on volaquas to everything
        return taskOrdering
    createExtraSaviors.grant_unlocks = []

    nextOrdering = createExtraSaviors(mixup_wave1, 'キヤロラ衛星の軌跡', 0, step1_unlocks)
    nextOrdering = createExtraSaviors(mixup_wave1, '新蛇姫', nextOrdering, step2_unlocks)
    nextOrdering = createExtraSaviors(mixup_wave1, 'BREDLI', nextOrdering, step1_unlocks)
    nextOrdering = createExtraSaviors(mixup_wave1, 'Kilonova', nextOrdering, step2_unlocks)
    nextOrdering = createExtraSaviors(mixup_wave1, 'VOLAQUAS', nextOrdering, final_song_unlocks)
    UserUnlock.objects.bulk_create(createExtraSaviors.grant_unlocks)

    nextOrdering = createExtraSaviors(mixup_wave2, '輪廻の鴉', 0, [])
    nextOrdering = createExtraSaviors(mixup_wave2, 'Dance With The Dead', nextOrdering, [])
    nextOrdering = createExtraSaviors(mixup_wave2, '[ ]DENTITY', nextOrdering, [])
    nextOrdering = createExtraSaviors(mixup_wave2, 'Indigo Nocturne', nextOrdering, [])
    nextOrdering = createExtraSaviors(mixup_wave2, 'Metamorphic', nextOrdering, [])
    nextOrdering = createExtraSaviors(mixup_wave2, 'White Stream', nextOrdering, [])

    and_doubles = UnlockTask.objects.create(event=mixup_wave2, name="All of the above, on doubles", ordering=nextOrdering)
    ChartUnlock.objects.create(task=and_doubles, chart=volaquas_challenge)

    mixup.delete()


def backward(apps, schema_editor):
    pass

class Migration(migrations.Migration):

    dependencies = [
        ('scorebrowser', '0130_20240403_bulk_content'),
    ]

    operations = [migrations.RunPython(forward, backward)]
