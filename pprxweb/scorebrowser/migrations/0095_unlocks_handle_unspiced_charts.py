# Generated by Django 3.2.16 on 2023-11-02 03:08

from django.db import migrations

def forward(apps, schema_editor):
    UnlockEvent = apps.get_model("scorebrowser", "UnlockEvent")
    UnlockTask = apps.get_model("scorebrowser", "UnlockTask")
    ChartUnlock = apps.get_model("scorebrowser", "ChartUnlock")
    UserUnlock = apps.get_model("scorebrowser", "UserUnlock")
    Chart = apps.get_model("scorebrowser", "Chart")
    Difficulty = apps.get_model("scorebrowser", "Difficulty")

    def findChart(title, difficulty_id):
        candidates = Chart.objects.filter(song__title=title, difficulty_id=difficulty_id)
        for chart in candidates:
            if chart.song.title == title: # 'take me higher' / 'TAKE ME HIGHER' sql collation woes
                return chart
        return None

    # this was in a previous migration, but was missing the save() ... lol
    oldExtraExclusiveTask = UnlockTask.objects.get(name="EXTRA EXCLUSIVE A20PLUS")
    for title in ['Last Card', 'ANTI ANTHEM']:
        unlock = ChartUnlock.objects.get(chart__song__title=title)
        unlock.task = oldExtraExclusiveTask
        unlock.save()

    # events that exclusively have tasks that unlock all charts for a single song
    for event_name in [
        'GOLDEN LEAGUE PLUS',
        'GOLDEN LEAGUE A3',
        '[A20 PLUS] COURSE TRIAL',
        '[A3] COURSE TRIAL A3',
        '[A20 PLUS] FLOOR INFECTION',
        '[A20 PLUS] The 10th KONAMI Arcade Championship Entry Song',
        '[A20 PLUS] BPL応援 楽曲解禁スタンプラリー',
        '[A20 PLUS] BEMANI 2021真夏の歌合戦5番勝負',
        '[A3] BEMANI PRO LEAGUE -SEASON 3- Triple Tribe',
        'EXTRA EXCLUSIVE',
        'EXTRA EXCLUSIVE A20PLUS',
    ]:
        for task in UnlockTask.objects.filter(event__name=event_name):
            if "challenge" in task.name:
                continue
            existing_unlocks = ChartUnlock.objects.filter(task=task)
            c = existing_unlocks[0]
            min_difficulty = min(x.chart.difficulty_id for x in existing_unlocks)
            for d in range(min_difficulty):
                ChartUnlock.objects.create(version_id=c.version_id, task_id=c.task_id, chart=findChart(c.chart.song.title, d), extra=c.extra)

    kac_task = UnlockTask.objects.get(name="Entered KAC 2023")
    for d in range(3):
        ChartUnlock.objects.create(version_id=19, task=kac_task, chart=findChart('パーフェクトイーター', d))

    mixup_1 = UnlockTask.objects.get(name="Step 1")
    for d in range(3):
        ChartUnlock.objects.create(version_id=19, task=mixup_1, chart=findChart('キヤロラ衛星の軌跡', d))
        ChartUnlock.objects.create(version_id=19, task=mixup_1, chart=findChart('BREDLI', d))

    mixup_2 = UnlockTask.objects.get(name="Step 2")
    for d in range(3):
        ChartUnlock.objects.create(version_id=19, task=mixup_2, chart=findChart('Kilonova', d))
    for d in range(2):
        ChartUnlock.objects.create(version_id=19, task=mixup_2, chart=findChart('新蛇姫', d))

    mixup_final = UnlockTask.objects.get(name="Final Song")
    for d in range(2):
        ChartUnlock.objects.create(version_id=19, task=mixup_final, chart=findChart('VOLAQUAS', d))


    diff_names = ["Beginner", "Basic", "Difficult", "Expert", "Challenge"]

    ordering = 0
    # extra saviors, which need new tasks for the lower difficulties
    for event_name in [
        '[A20 PLUS] EXTRA SAVIOR PLUS',
        '[A20 PLUS] バンめし♪ ふるさとグランプリ ROUND 2',
        '[A20 PLUS] バンめし♪ ふるさとグランプリ ROUND 3',
        '[A20 PLUS] Trick and DDR! HAPPY HALLOWEEN!!',
        '[A20 PLUS] Merry Christmas and Happy DDR! 2020',
        '[A20 PLUS] 恋せよDDRのバレンタイン＆ホワイトデー2021',
        '[A20 PLUS] 花咲ケ!DDR SPRING FESTIVAL',
        '[A20 PLUS] OVER 200',
        '[A20 PLUS] 恋せよDDRのバレンタイン＆ホワイトデー2022',
        '[A20 PLUS] DANCERUSH STARDOM × DanceDanceRevolution SUMMER DANCE CAMP 2020',
        '[A20 PLUS] いちかのBEMANI超じゃんけん大会2020',
        '[A20 PLUS] 毎週！いちかの超BEMANIラッシュ2020',
        '[A3] EXTRA SAVIOR A3',
        '[A3] Enjoy Summer Vacation!',
        '[A3] BEMANI 2021真夏の歌合戦5番勝負 (wave 1)',
        '[A3] BEMANI 2021真夏の歌合戦5番勝負 (wave 2)',
        '[A3] Crystal clear winter',
        '[A3] 恋せよDDRのバレンタイン＆ホワイトデー2023',
        '[A3] 春を呼ぶ桜の祝祭',
        '[A3] DANCE aROUND × DanceDanceRevolution 2022 natsu no MUSIC CHOICE',
        '[A3] KONAMI Arcade Championship (2023) Entry Songs',
    ]:
        # {title: (lowest difficulty, task, version_id)}
        existing_unlocks = {}
        
        event = UnlockEvent.objects.get(name=event_name)
        for task in UnlockTask.objects.filter(event_id=event.id).order_by('ordering'):
            if (task.name in ["All of the above, on doubles", "Entered KAC 2023"]):
                continue
            ordering += 10
            task.ordering = ordering
            task.save()

            [unlock] = [x for x in ChartUnlock.objects.filter(task=task) if x.chart.song.title != '恋愛観測 -2021真夏のエンディング ver.-']
            title = unlock.chart.song.title
            if (title not in existing_unlocks) or (existing_unlocks[title][0] > unlock.chart.difficulty_id):
                existing_unlocks[title] = (unlock.chart.difficulty_id, task, unlock.version_id)

        for title in existing_unlocks:
            new_ordering = existing_unlocks[title][1].ordering
            version_id = existing_unlocks[title][2]
            for d in reversed(range(existing_unlocks[title][0])):
                new_ordering -= 1
                chart = findChart(title, d)
                task_name = "{} ({} {})".format(title, diff_names[d], chart.rating)
                task = UnlockTask.objects.create(event=event, name=task_name, ordering=new_ordering)
                ChartUnlock.objects.create(version_id=version_id, task=task, chart=chart, extra=True)
                for user_unlock in UserUnlock.objects.filter(task=existing_unlocks[title][1]):
                    user = user_unlock.user
                    UserUnlock.objects.create(user=user, task=task)


    advance_play = {
        'SPECIAL music pack feat.Touhou Project vol.1': [
            ('リスペク風神', 3),
            ('最速最高シャッターガール', 3),
        ],
        'SPECIAL music pack feat.Touhou Project vol.2': [
            ('恋の氷結おてんば湯けむりチルノ温泉', 3),
            ('スカーレット警察のゲットーパトロール24時', 3),
        ],
        'GRAND PRIX music pack vol.14': [
            ('Be With You (Still Miss you)', 3),
            ('little steps', 3),
            ('On the Night of a Still Wind', 3),
            ('Such A Feeling', 3),
        ],
        'GRAND PRIX music pack vol.18': [
            ('Hold Tight', 3),
            ('JUST BELIEVE', 3),
            ('LOVE SHINE (Body Grooverz 2006 mix)', 3),
            ('the beat', 3),
        ],
        'SPECIAL music pack feat.REFLEC BEAT vol.1': [
            ('Flip Flap', 3),
            ('GLITTER', 3),
            ('Valanga', 3),
            ('カラフルミニッツ', 3),
        ],
        'SPECIAL music pack feat.REFLEC BEAT vol.2': [
            ('Broken', 3),
            ('Playing With Fire', 3),
            ('Towards The Horizon', 3),
            ('伐折羅-vajra-', 3),
        ],
        'GRAND PRIX music pack vol.22': [
            ('Open Your Eyes', 3),
            ("Racing with Time (NAOKI's 999 remix)", 3),
            ('SAY A PRAYER', 3),
            ('Surrender (PureFocus remix)', 3),
        ],
        'BPL S2 music pack vol.0': [
            ('BREAKING THE FUTURE', 2),
        ],
        'BPL S2 music pack vol.1 (Aria)': [
            ('Aria', 3),
        ],
        'BPL S2 music pack vol.2 (Rise As One)': [
            ('Rise As One', 3),
        ],
        'BPL S2 music pack vol.3 (Drive Away)': [
            ('Drive Away', 3),
        ],
        'BPL S2 music pack vol.4 (Chromatic Burst)': [
            ('Chromatic Burst', 3),
        ],
        'BPL S2 music pack vol.5 (GLOW THE CROWN)': [
            ('GLOW THE CROWN', 2),
        ],
        'BPL S2 music pack vol.6 (SMASH)': [
            ('SMASH', 3),
        ],
        'BPL S2 music pack vol.7 (Complete Game Victory)': [
            ('Complete Game Victory', 3),
        ],
        'BPL S2 music pack vol.8 (Abrupt Madness)': [
            ('Abrupt Madness', 3),
        ],
    }

    for task_name in advance_play:
        task = UnlockTask.objects.get(name=task_name)
        for title, min_difficulty in advance_play[task_name]:
            for d in range(min_difficulty):
                ChartUnlock.objects.create(version_id=19, task=task, chart=findChart(title, d))

def backward(apps, schema_editor):
    pass

class Migration(migrations.Migration):

    dependencies = [
        ('scorebrowser', '0094_a20plus_amethyst_corrections'),
    ]

    operations = [migrations.RunPython(forward, backward)]
